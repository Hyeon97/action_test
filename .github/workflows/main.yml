name: Build and Deploy to NKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: zdm-api-server
  NKS_REGISTRY: your-nks-registry.ncloud.com
  NKS_NAMESPACE: your-namespace
  
jobs:
  # 1단계: 빌드 및 테스트
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 22 설정
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: TypeScript 빌드 테스트
      run: npm run build
      
    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          package.json
          package-lock.json
        retention-days: 1

  # 2단계: Docker 이미지 빌드 및 푸시
  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: NKS Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.NKS_REGISTRY }}
        username: ${{ secrets.NKS_REGISTRY_USERNAME }}
        password: ${{ secrets.NKS_REGISTRY_PASSWORD }}
        
    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.NKS_REGISTRY }}/${{ env.NKS_NAMESPACE }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Docker 이미지 빌드 및 푸시
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: 이미지 스캔 (Trivy)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.NKS_REGISTRY }}/${{ env.NKS_NAMESPACE }}/${{ env.PROJECT_NAME }}:latest
        format: 'table'
        exit-code: '0'

  # 3단계: NKS 배포
  deploy-to-nks:
    name: Deploy to NKS
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://your-domain.com
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: NKS kubectl 설정
      run: |
        # NKS 클러스터 설정
        mkdir -p $HOME/.kube
        echo "${{ secrets.NKS_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: kubectl 연결 테스트
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: 배포 매니페스트 업데이트
      run: |
        # 이미지 태그 업데이트
        sed -i "s|your-nks-registry.ncloud.com/your-namespace/zdm-api-server:latest|${{ env.NKS_REGISTRY }}/${{ env.NKS_NAMESPACE }}/${{ env.PROJECT_NAME }}:main-${{ github.sha }}|g" k8s/deployment.yaml
        
    - name: NKS에 배포
      run: |
        kubectl apply -f k8s/deployment.yaml
        
    - name: 배포 상태 확인
      run: |
        kubectl rollout status deployment/zdm-api-server -n default --timeout=300s
        kubectl get pods -l app=zdm-api-server -n default
        
    - name: 서비스 상태 확인
      run: |
        kubectl get service zdm-api-server-service -n default
        kubectl get ingress zdm-api-server-ingress -n default
        
    - name: 헬스체크
      run: |
        # 서비스가 정상적으로 응답하는지 확인
        sleep 30
        kubectl port-forward service/zdm-api-server-service 8080:80 -n default &
        sleep 10
        curl -f http://localhost:8080/ || exit 1
        echo "✅ Health check passed!"

  # 4단계: 배포 후 알림
  notify-deployment:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, deploy-to-nks]
    if: always()
    
    steps:
    - name: 배포 결과 이메일 알림
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "[NKS] TypeScript Server 배포 결과: ${{ job.status == 'success' && '성공' || '실패' }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          NKS TypeScript Server 배포가 완료되었습니다.

          ## 배포 결과
          - 빌드 상태: ${{ needs.build-and-test.result }}
          - Docker 빌드: ${{ needs.docker-build.result }}
          - NKS 배포: ${{ needs.deploy-to-nks.result }}

          ## 배포 정보
          - 프로젝트: ${{ env.PROJECT_NAME }}
          - 브랜치: ${{ github.ref_name }}
          - 커밋: ${{ github.sha }}
          - 이미지: ${{ env.NKS_REGISTRY }}/${{ env.NKS_NAMESPACE }}/${{ env.PROJECT_NAME }}:main-${{ github.sha }}

          ## 링크
          - 액션: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - 서비스: https://your-domain.com

      if: always()