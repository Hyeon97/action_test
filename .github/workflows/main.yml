name: Build and Push to NCP Container Registry

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# GitHub Actions 권한 설정
permissions:
  contents: read
  packages: write

env:
  PROJECT_NAME: zdm-api-server
  REGISTRY_URL: zcon-nipa-container-registry.kr.ncr.ntruss.com
  NODE_VERSION: '22'

jobs:
  # 1단계: 빌드 및 테스트
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js ${{ env.NODE_VERSION }} 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🧪 TypeScript 빌드 테스트
      run: |
        echo "🔍 Testing TypeScript build..."
        npm run build
        echo "✅ TypeScript build successful"
        
    - name: 🏷️ 버전 정보 생성
      id: version
      run: |
        # 태그가 있으면 태그를 사용, 없으면 브랜치-SHA 조합 사용
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.ref_name }}-${{ github.sha }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📍 Generated version: $VERSION"
        
    - name: 📤 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ steps.version.outputs.version }}
        path: |
          dist/
          package.json
          package-lock.json
        retention-days: 1

  # 2단계: Docker 이미지 빌드 및 푸시
  docker-build-push:
    name: Docker Build and Push to NCP
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 NCP Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.NCP_REGISTRY_USERNAME }}
        password: ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
    - name: 🏷️ 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=${{ env.PROJECT_NAME }}
          org.opencontainers.image.description=TypeScript Server for ${{ env.PROJECT_NAME }}
          org.opencontainers.image.vendor=Your Organization
          
    - name: 🐳 Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: 📋 푸시된 이미지 정보 출력
      run: |
        echo "🎉 Successfully pushed to NCP Container Registry!"
        echo "📍 Registry: ${{ env.REGISTRY_URL }}"
        echo "📍 Repository: ${{ env.PROJECT_NAME }}"
        echo "📍 Tags:"
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          echo "   - $tag"
        done
        
    - name: 🧹 빌드 캐시 정리
      run: |
        echo "🧹 Cleaning up build cache..."
        docker builder prune -f
        echo "✅ Build cache cleaned up"

  # 3단계: 이미지 검증
  verify-image:
    name: Verify Pushed Image
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push'
    
    steps:
    - name: 🔐 NCP Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.NCP_REGISTRY_USERNAME }}
        password: ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
    - name: 🔍 이미지 검증
      run: |
        echo "🔍 Verifying pushed image..."
        
        # latest 태그 이미지 풀 테스트
        IMAGE_NAME="${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:latest"
        echo "📦 Pulling image: $IMAGE_NAME"
        
        if docker pull "$IMAGE_NAME"; then
          echo "✅ Image pull successful"
          
          # 이미지 정보 출력
          echo "📋 Image information:"
          docker images "$IMAGE_NAME" --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}"
          
          # 간단한 실행 테스트
          echo "🚀 Testing container startup..."
          CONTAINER_ID=$(docker run -d -p 8080:53307 "$IMAGE_NAME")
          
          # 컨테이너 시작 대기
          sleep 15
          
          # 헬스체크
          if docker ps | grep -q "$CONTAINER_ID"; then
            echo "✅ Container is running"
            
            # HTTP 응답 테스트 (포트포워딩 없이 컨테이너 내부에서)
            if docker exec "$CONTAINER_ID" wget -q --spider http://localhost:53307/; then
              echo "✅ Application is responding"
            else
              echo "⚠️ Application health check failed"
              docker logs "$CONTAINER_ID"
            fi
          else
            echo "❌ Container failed to start"
            docker logs "$CONTAINER_ID"
          fi
          
          # 정리
          docker stop "$CONTAINER_ID" > /dev/null 2>&1
          docker rm "$CONTAINER_ID" > /dev/null 2>&1
          
        else
          echo "❌ Image pull failed"
          exit 1
        fi

  # 4단계: GitHub Release 생성
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, verify-image]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    outputs:
      release-url: ${{ steps.create_release.outputs.html_url }}
      upload-url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기 (릴리즈 노트 생성용)
        
    - name: 📝 릴리즈 노트 생성
      id: release_notes
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # 이전 태그 찾기
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$TAG_NAME^" 2>/dev/null || echo "")
        
        # 릴리즈 노트 생성
        RELEASE_NOTES_FILE="release_notes.md"
        
        echo "# 🚀 $TAG_NAME Release" > $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        
        # Docker 이미지 정보 추가
        echo "## 📦 Docker Images" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        echo "```bash" >> $RELEASE_NOTES_FILE
        echo "# Pull the latest image" >> $RELEASE_NOTES_FILE
        echo "docker pull ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:$TAG_NAME" >> $RELEASE_NOTES_FILE
        echo "docker pull ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:latest" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        echo "# Run the container" >> $RELEASE_NOTES_FILE
        echo "docker run -d -p 53307:53307 ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:$TAG_NAME" >> $RELEASE_NOTES_FILE
        echo "```" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        
        # 변경사항 추가
        echo "## 📋 Changes" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### 🔄 Changes since $PREVIOUS_TAG" >> $RELEASE_NOTES_FILE
          echo "" >> $RELEASE_NOTES_FILE
          
          # 커밋 로그 생성
          git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..$TAG_NAME" >> $RELEASE_NOTES_FILE || echo "- Initial release" >> $RELEASE_NOTES_FILE
        else
          echo "### 🎉 Initial Release" >> $RELEASE_NOTES_FILE
          echo "" >> $RELEASE_NOTES_FILE
          echo "- First release of ${{ env.PROJECT_NAME }}" >> $RELEASE_NOTES_FILE
        fi
        
        echo "" >> $RELEASE_NOTES_FILE
        
        # 기술 정보 추가
        echo "## 🔧 Technical Information" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> $RELEASE_NOTES_FILE
        echo "- **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $RELEASE_NOTES_FILE
        echo "- **Git Commit**: \`${{ github.sha }}\`" >> $RELEASE_NOTES_FILE
        echo "- **Docker Registry**: ${{ env.REGISTRY_URL }}" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        
        # 배포 가이드 추가
        echo "## 🚀 Deployment" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        echo "### Kubernetes Deployment" >> $RELEASE_NOTES_FILE
        echo "```yaml" >> $RELEASE_NOTES_FILE
        echo "apiVersion: apps/v1" >> $RELEASE_NOTES_FILE
        echo "kind: Deployment" >> $RELEASE_NOTES_FILE
        echo "metadata:" >> $RELEASE_NOTES_FILE
        echo "  name: ${{ env.PROJECT_NAME }}" >> $RELEASE_NOTES_FILE
        echo "spec:" >> $RELEASE_NOTES_FILE
        echo "  replicas: 3" >> $RELEASE_NOTES_FILE
        echo "  template:" >> $RELEASE_NOTES_FILE
        echo "    spec:" >> $RELEASE_NOTES_FILE
        echo "      containers:" >> $RELEASE_NOTES_FILE
        echo "      - name: app" >> $RELEASE_NOTES_FILE
        echo "        image: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:$TAG_NAME" >> $RELEASE_NOTES_FILE
        echo "        ports:" >> $RELEASE_NOTES_FILE
        echo "        - containerPort: 53307" >> $RELEASE_NOTES_FILE
        echo "```" >> $RELEASE_NOTES_FILE
        echo "" >> $RELEASE_NOTES_FILE
        
        # 릴리즈 노트 내용을 GitHub Output으로 설정
        {
          echo 'release_notes<<EOF'
          cat $RELEASE_NOTES_FILE
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        
        echo "📝 Release notes generated for $TAG_NAME"
        cat $RELEASE_NOTES_FILE
        
    - name: 🎉 GitHub Release 생성
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_notes.outputs.tag_name }}
        release_name: "Release ${{ steps.release_notes.outputs.tag_name }}"
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: ${{ contains(steps.release_notes.outputs.tag_name, 'alpha') || contains(steps.release_notes.outputs.tag_name, 'beta') || contains(steps.release_notes.outputs.tag_name, 'rc') }}
        
    - name: 📦 릴리즈 아티팩트 준비
      run: |
        # 릴리즈에 첨부할 파일들 준비
        mkdir -p release-artifacts
        
        # package.json 복사
        cp package.json release-artifacts/
        
        # Docker 실행 스크립트 생성
        cat > release-artifacts/run-docker.sh << 'EOF'
        #!/bin/bash
        # ${{ env.PROJECT_NAME }} ${{ steps.release_notes.outputs.tag_name }} 실행 스크립트
        
        echo "🚀 Starting ${{ env.PROJECT_NAME }} ${{ steps.release_notes.outputs.tag_name }}"
        
        # 이미지 풀
        docker pull ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${{ steps.release_notes.outputs.tag_name }}
        
        # 컨테이너 실행
        docker run -d \
          --name ${{ env.PROJECT_NAME }}-${{ steps.release_notes.outputs.tag_name }} \
          -p 53307:53307 \
          --restart unless-stopped \
          ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${{ steps.release_notes.outputs.tag_name }}
        
        echo "✅ ${{ env.PROJECT_NAME }} started on port 53307"
        echo "🌐 Access: http://localhost:53307"
        EOF
        
        chmod +x release-artifacts/run-docker.sh
        
        # Kubernetes 배포 매니페스트 생성
        cat > release-artifacts/k8s-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ env.PROJECT_NAME }}
          labels:
            app: ${{ env.PROJECT_NAME }}
            version: ${{ steps.release_notes.outputs.tag_name }}
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: ${{ env.PROJECT_NAME }}
          template:
            metadata:
              labels:
                app: ${{ env.PROJECT_NAME }}
                version: ${{ steps.release_notes.outputs.tag_name }}
            spec:
              containers:
              - name: app
                image: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${{ steps.release_notes.outputs.tag_name }}
                ports:
                - containerPort: 53307
                env:
                - name: PORT
                  value: "53307"
                - name: NODE_ENV
                  value: "production"
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: /
                    port: 53307
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 53307
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ env.PROJECT_NAME }}-service
          labels:
            app: ${{ env.PROJECT_NAME }}
        spec:
          selector:
            app: ${{ env.PROJECT_NAME }}
          ports:
          - name: http
            port: 80
            targetPort: 53307
            protocol: TCP
          type: ClusterIP
        EOF
        
        # 아티팩트 목록 생성
        cat > release-artifacts/README.md << EOF
        # ${{ env.PROJECT_NAME }} ${{ steps.release_notes.outputs.tag_name }} Release Files
        
        ## 📦 포함된 파일들
        
        - \`package.json\`: 프로젝트 의존성 정보
        - \`run-docker.sh\`: Docker 컨테이너 실행 스크립트
        - \`k8s-deployment.yaml\`: Kubernetes 배포 매니페스트
        - \`README.md\`: 이 파일
        
        ## 🚀 빠른 시작
        
        ### Docker로 실행
        \`\`\`bash
        chmod +x run-docker.sh
        ./run-docker.sh
        \`\`\`
        
        ### Kubernetes에 배포
        \`\`\`bash
        kubectl apply -f k8s-deployment.yaml
        \`\`\`
        
        ## 📞 문의
        
        문제가 있거나 질문이 있으시면 이슈를 생성해주세요.
        EOF
        
        echo "📦 Release artifacts prepared"
        ls -la release-artifacts/
        
    - name: 📎 아티팩트 파일 업로드
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/run-docker.sh
        asset_name: run-docker.sh
        asset_content_type: application/x-sh
        
    - name: 📎 Kubernetes 매니페스트 업로드
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/k8s-deployment.yaml
        asset_name: k8s-deployment.yaml
        asset_content_type: application/x-yaml
        
    - name: 📎 패키지 정보 업로드
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/package.json
        asset_name: package.json
        asset_content_type: application/json
        
    - name: 📎 README 업로드
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/README.md
        asset_name: README.md
        asset_content_type: text/markdown

  # 5단계: 알림 및 결과 리포트
  notify-result:
    name: Notify Build Result
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, verify-image]
    if: always()
    
    steps:
    - name: 📧 결과 이메일 알림
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "[NCP] ${{ env.PROJECT_NAME }} 빌드 및 푸시 결과: ${{ needs.docker-build-push.result == 'success' && '성공' || '실패' }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          ${{ env.PROJECT_NAME }} Docker 이미지 빌드 및 NCP Container Registry 푸시가 완료되었습니다.

          ## 빌드 결과 요약
          - 📦 빌드 및 테스트: ${{ needs.build-and-test.result }}
          - 🐳 Docker 빌드 & 푸시: ${{ needs.docker-build-push.result }}
          - 🔍 이미지 검증: ${{ needs.verify-image.result }}

          ## 프로젝트 정보
          - 프로젝트: ${{ env.PROJECT_NAME }}
          - 레지스트리: ${{ env.REGISTRY_URL }}
          - 브랜치: ${{ github.ref_name }}
          - 커밋: ${{ github.sha }}
          - 버전: ${{ needs.build-and-test.outputs.version }}
          - 트리거: ${{ github.event_name }}
          - 작성자: ${{ github.actor }}

          ## Docker 이미지
          ${{ needs.docker-build-push.result == 'success' && format('```
          {0}/{1}:latest
          {0}/{1}:{2}
          ```', env.REGISTRY_URL, env.PROJECT_NAME, needs.build-and-test.outputs.version) || '이미지 빌드 실패' }}

          ## 액션 상세 보기
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ---
          실행 시간: ${{ github.event.head_commit.timestamp }}
      if: always()
      
    - name: 📊 워크플로우 요약
      run: |
        echo "## 🎯 빌드 및 푸시 워크플로우 완료 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 단계 | 결과 | 상태 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 빌드 및 테스트 | ${{ needs.build-and-test.result }} | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker 빌드 & 푸시 | ${{ needs.docker-build-push.result }} | ${{ needs.docker-build-push.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 이미지 검증 | ${{ needs.verify-image.result }} | ${{ needs.verify-image.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 생성된 이미지" >> $GITHUB_STEP_SUMMARY
        echo "- **레지스트리**: \`${{ env.REGISTRY_URL }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **프로젝트**: \`${{ env.PROJECT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **버전**: \`${{ needs.build-and-test.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
      if: always()