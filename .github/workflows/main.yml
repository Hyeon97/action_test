name: Build and Push to NCP Container Registry

on:
  push:
    branches: [ '**' ]  # 모든 브랜치에서 실행
  pull_request:
    branches: [ main, develop ]

# GitHub Actions 권한 설정
permissions:
  contents: read
  packages: write

env:
  PROJECT_NAME: zdm-api-server
  REGISTRY_URL: zcon-nipa-container-registry.kr.ncr.ntruss.com
  NODE_VERSION: '22'
  # Kubernetes 배포 설정
  K8S_NAMESPACE: zdm-api
  K8S_DEPLOYMENT_NAME: zdm-api
  K8S_CONTAINER_NAME: zdm-api

jobs:
  # 1단계: 빌드 및 테스트
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      unique_tag: ${{ steps.version.outputs.unique_tag }}
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js ${{ env.NODE_VERSION }} 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🧪 TypeScript 빌드 테스트
      run: |
        echo "🔍 Testing TypeScript build..."
        npm run build
        echo "✅ TypeScript build successful"
        
    - name: 🏷️ 버전 정보 생성
      id: version
      run: |
        # 기본 버전 생성
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.ref_name }}-${{ github.sha }}
        fi
        
        # 간소화된 고유 태그 생성 (브랜치명-날짜-시간)
        UNIQUE_TAG="${{ github.ref_name }}-$(date +%Y%m%d-%H%M%S)"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "unique_tag=$UNIQUE_TAG" >> $GITHUB_OUTPUT
        echo "📍 Generated version: $VERSION"
        echo "📍 Generated unique tag: $UNIQUE_TAG"
        
    - name: 📤 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ steps.version.outputs.version }}
        path: |
          dist/
          package.json
          package-lock.json
        retention-days: 1

  # 2단계: Docker 이미지 빌드 및 푸시 (간소화된 태그 전략)
  docker-build-push:
    name: Docker Build and Push (Simplified Tags)
    runs-on: ubuntu-latest
    needs: build-and-test
    # main, develop 브랜치의 push 이벤트에서만 실행
    if: |
      github.event_name == 'push' && 
      (github.ref_name == 'main' || github.ref_name == 'develop')
    
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      unique_tag: ${{ needs.build-and-test.outputs.unique_tag }}
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 NCP Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.NCP_REGISTRY_USERNAME }}
        password: ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
    - name: 🏷️ 메타데이터 추출 (간소화된 태그 전략)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=raw,value=${{ needs.build-and-test.outputs.unique_tag }}
        labels: |
          org.opencontainers.image.title=${{ env.PROJECT_NAME }}
          org.opencontainers.image.description=TypeScript Server for ${{ env.PROJECT_NAME }}
          org.opencontainers.image.vendor=Your Organization
          org.opencontainers.image.version=${{ needs.build-and-test.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
          
    - name: 🐳 Docker 이미지 빌드 및 푸시 (간소화된 태그)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: 📋 푸시된 이미지 정보 출력
      run: |
        echo "🎉 Successfully pushed to NCP Container Registry!"
        echo "📍 Registry: ${{ env.REGISTRY_URL }}"
        echo "📍 Repository: ${{ env.PROJECT_NAME }}"
        echo "📍 Branch Tag: ${{ github.ref_name }}"
        echo "📍 Unique Tag: ${{ needs.build-and-test.outputs.unique_tag }}"
        echo "📍 Generated Tags:"
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          echo "   - $tag"
        done
        
    - name: 🧹 빌드 캐시 정리
      run: |
        echo "🧹 Cleaning up build cache..."
        docker builder prune -f
        echo "✅ Build cache cleaned up"

  # 3단계: 간소화된 태그 이미지 검증
  verify-image:
    name: Simplified Tag Image Verification
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push]
    # Docker 이미지가 푸시된 경우에만 실행
    if: |
      github.event_name == 'push' && 
      (github.ref_name == 'main' || github.ref_name == 'develop')
    
    steps:
    - name: 🔐 NCP Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.NCP_REGISTRY_USERNAME }}
        password: ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
    - name: 🔍 간소화된 태그 이미지 검증 및 캐시 정리
      run: |
        echo "🔍 Simplified tag image verification with comprehensive cache cleanup..."
        
        # Docker 캐시 완전 정리 (최신 이미지 확실히 다운로드)
        echo "🧹 Comprehensive Docker cache cleanup..."
        docker system prune -af --volumes
        docker builder prune -af
        echo "✅ All Docker cache cleaned"
        
        # 브랜치명 태그와 고유 태그 모두 검증
        UNIQUE_TAG="${{ needs.build-and-test.outputs.unique_tag }}"
        BRANCH_IMAGE="${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${{ github.ref_name }}"
        UNIQUE_IMAGE="${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${UNIQUE_TAG}"
        
        echo "📦 Verifying images:"
        echo "   - Branch: $BRANCH_IMAGE"
        echo "   - Unique: $UNIQUE_IMAGE"
        
        # 브랜치명 이미지 강제 다운로드 및 검증
        if docker pull "$BRANCH_IMAGE" --disable-content-trust; then
          echo "✅ Branch image pull successful"
          
          # 고유 태그 이미지도 검증
          if docker pull "$UNIQUE_IMAGE" --disable-content-trust; then
            echo "✅ Unique tag image pull successful"
          else
            echo "⚠️ Unique tag image not found, but branch image is available"
          fi
          
          # 상세한 이미지 정보 출력
          echo "📋 Branch image information:"
          docker images "$BRANCH_IMAGE" --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}"
          
          # 이미지 메타데이터 상세 분석
          echo "📋 Detailed image metadata:"
          echo "🕐 Created: $(docker inspect "$BRANCH_IMAGE" --format='{{.Created}}')"
          echo "🆔 Image ID: $(docker inspect "$BRANCH_IMAGE" --format='{{.Id}}')"
          echo "🏗️ Architecture: $(docker inspect "$BRANCH_IMAGE" --format='{{.Architecture}}')"
          echo "📊 Size: $(docker inspect "$BRANCH_IMAGE" --format='{{.Size}}' | numfmt --to=iec)"
          echo "🔗 Parent: $(docker inspect "$BRANCH_IMAGE" --format='{{.Parent}}')"
          
          # 이미지 레이어 히스토리 분석
          echo "📋 Image build history (last 10 layers):"
          docker history "$BRANCH_IMAGE" --no-trunc --format "table {{.CreatedBy}}\t{{.CreatedAt}}\t{{.Size}}" | head -11
          
          # 이미지 내부 구조 확인
          echo "📋 Image internal structure:"
          docker run --rm "$BRANCH_IMAGE" ls -la / | head -20 || echo "⚠️ Could not list root directory"
          
          # 애플리케이션 디렉토리 확인
          echo "📋 Application directory structure:"
          docker run --rm "$BRANCH_IMAGE" ls -la /app/ | head -20 || echo "⚠️ /app directory not accessible"
          
          # package.json 확인 (버전 정보)
          echo "📋 Application version info:"
          docker run --rm "$BRANCH_IMAGE" cat /app/package.json | grep -E '"(name|version)"' || echo "⚠️ package.json not found"
          
          # 컨테이너 실행 테스트
          echo "🚀 Container runtime testing..."
          CONTAINER_ID=$(docker run -d -p 8080:53307 "$BRANCH_IMAGE")
          
          # 컨테이너 시작 대기 및 상태 확인
          echo "⏳ Waiting for container to initialize..."
          sleep 20
          
          if docker ps | grep -q "$CONTAINER_ID"; then
            echo "✅ Container is running successfully"
            
            # 컨테이너 상세 정보
            echo "📋 Container runtime information:"
            docker inspect "$CONTAINER_ID" --format='🕐 Started: {{.State.StartedAt}}'
            docker inspect "$CONTAINER_ID" --format='📊 Status: {{.State.Status}}'
            docker inspect "$CONTAINER_ID" --format='🖥️ Platform: {{.Platform}}'
            
            # 포트 바인딩 확인
            echo "📋 Port bindings:"
            docker port "$CONTAINER_ID"
            
            # 실행 중인 프로세스 확인
            echo "📋 Running processes:"
            docker exec "$CONTAINER_ID" ps aux | head -10 || echo "⚠️ Could not list processes"
            
            # 애플리케이션 로그 확인 (최신 변경사항 추적)
            echo "📋 Application logs (last 30 lines):"
            docker logs "$CONTAINER_ID" --tail 30
            
            # 네트워크 연결 테스트
            echo "🌐 Network connectivity test:"
            if docker exec "$CONTAINER_ID" wget -q --spider http://localhost:53307/ --timeout=10; then
              echo "✅ Application is responding on port 53307"
            else
              echo "⚠️ Application health check failed"
              echo "📋 Detailed application logs:"
              docker logs "$CONTAINER_ID"
            fi
            
            # 환경 변수 확인
            echo "📋 Environment variables:"
            docker exec "$CONTAINER_ID" env | grep -E "(NODE|PORT|ENV)" | head -10 || echo "⚠️ Could not read environment"
            
          else
            echo "❌ Container failed to start"
            echo "📋 Container logs for debugging:"
            docker logs "$CONTAINER_ID"
            echo "📋 Container inspect for debugging:"
            docker inspect "$CONTAINER_ID" --format='{{.State}}'
          fi
          
          # 정리
          echo "🧹 Cleaning up test container..."
          docker stop "$CONTAINER_ID" > /dev/null 2>&1
          docker rm "$CONTAINER_ID" > /dev/null 2>&1
          echo "✅ Container cleanup completed"
          
        else
          echo "❌ Image pull failed"
          echo "📋 Registry login status:"
          docker system info | grep -A5 "Registry"
          exit 1
        fi
        
        echo "✅ Simplified tag image verification completed successfully"

  # 4단계: 무중단 Kubernetes 배포
  deploy-to-kubernetes:
    name: Zero-Downtime Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, verify-image]
    # main 브랜치에 push할 때만 배포 (운영 환경)
    if: |
      github.event_name == 'push' && 
      github.ref_name == 'main' &&
      needs.verify-image.result == 'success'
    
    environment:
      name: production
      url: http://zdm-api-service.zdm-api.svc.cluster.local:53307
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: ⚙️ kubectl 설치
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: 🔐 NKS 클러스터 인증 설정 (Service Account Token)
      run: |
        echo "🔐 Setting up NKS cluster authentication with Service Account Token..."
        
        # Secret 값 검증
        if [ -z "${{ secrets.KUBE_CONFIG_DATA }}" ]; then
          echo "❌ KUBE_CONFIG_DATA secret is empty!"
          echo "Please set KUBE_CONFIG_DATA secret in repository settings"
          exit 1
        fi
        
        # kubeconfig 파일 생성 (Service Account Token 방식)
        mkdir -p $HOME/.kube
        echo "🔍 Creating kubeconfig file..."
        echo "${{ secrets.KUBE_CONFIG_DATA }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
        # kubeconfig 파일 검증
        if [ ! -s $HOME/.kube/config ]; then
          echo "❌ kubeconfig file is empty!"
          exit 1
        fi
        
        echo "✅ kubeconfig file created successfully"
        echo "📋 Config file size: $(wc -c < $HOME/.kube/config) bytes"
        
        # kubeconfig 인증 방식 확인
        echo "📋 kubeconfig authentication method check:"
        if grep -q "token:" $HOME/.kube/config; then
          echo "✅ Service Account Token authentication detected"
        elif grep -q "ncp-iam-authenticator" $HOME/.kube/config; then
          echo "❌ ncp-iam-authenticator method detected - please use Service Account Token method"
          exit 1
        else
          echo "⚠️ Unknown authentication method"
        fi
        
        # 클러스터 연결 테스트
        echo "🔍 Testing cluster connectivity..."
        if ! kubectl cluster-info; then
          echo "❌ Failed to connect to cluster"
          echo "📋 kubeconfig content (first 10 lines):"
          head -10 $HOME/.kube/config
          exit 1
        fi
        
        echo "🔍 Testing cluster access permissions..."
        kubectl get nodes
        kubectl get namespaces
        
        echo "✅ Successfully connected to NKS cluster using Service Account Token"
        
    - name: 🔍 배포 전 상태 진단
      run: |
        echo "🔍 Pre-deployment cluster status diagnosis..."
        
        # 클러스터 리소스 상태 확인
        echo "📋 Cluster resource status:"
        kubectl top nodes || echo "⚠️ Metrics server not available"
        
        # namespace 존재 및 상태 확인
        if ! kubectl get namespace ${{ env.K8S_NAMESPACE }} >/dev/null 2>&1; then
          echo "❌ Namespace ${{ env.K8S_NAMESPACE }} does not exist!"
          echo "Available namespaces:"
          kubectl get namespaces
          exit 1
        fi
        echo "✅ Namespace ${{ env.K8S_NAMESPACE }} exists"
        
        # deployment 존재 및 상태 확인
        if ! kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} >/dev/null 2>&1; then
          echo "❌ Deployment ${{ env.K8S_DEPLOYMENT_NAME }} does not exist!"
          echo "Available deployments in namespace:"
          kubectl get deployments -n ${{ env.K8S_NAMESPACE }}
          exit 1
        fi
        echo "✅ Deployment ${{ env.K8S_DEPLOYMENT_NAME }} exists"
        
        # 현재 배포 상태 상세 분석
        echo "📋 Current deployment detailed status:"
        kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide
        
        # 현재 실행 중인 이미지 정보
        echo "📋 Current running image:"
        CURRENT_IMAGE=$(kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
        echo "Current: $CURRENT_IMAGE"
        
        # Pod 상태 분석
        echo "📋 Current pod status:"
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api --sort-by=.metadata.creationTimestamp
        
        # Pod 상세 정보
        echo "📋 Pod resource usage:"
        kubectl top pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api || echo "⚠️ Pod metrics not available"
        
        # Service 상태 확인
        echo "📋 Service status:"
        kubectl get service -n ${{ env.K8S_NAMESPACE }}
        
        # 최근 이벤트 확인
        echo "📋 Recent cluster events:"
        kubectl get events -n ${{ env.K8S_NAMESPACE }} --sort-by='.lastTimestamp' | tail -10
        
        echo "✅ Pre-deployment diagnosis completed"
        
    - name: 🚀 무중단 Kubernetes 배포 (고유 태그 전략)
      run: |
        echo "🚀 Initiating zero-downtime Kubernetes deployment..."
        
        # 고유 태그로 새 이미지 준비
        UNIQUE_TAG="${{ needs.build-and-test.outputs.unique_tag }}"
        NEW_IMAGE="${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${UNIQUE_TAG}"
        FALLBACK_IMAGE="${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:${{ github.ref_name }}"
        
        echo "📦 Target images:"
        echo "   Primary: $NEW_IMAGE"
        echo "   Fallback: $FALLBACK_IMAGE"
        
        # Registry에서 이미지 존재 확인
        echo "🔍 Verifying image availability in registry..."
        docker login ${{ env.REGISTRY_URL }} -u ${{ secrets.NCP_REGISTRY_USERNAME }} -p ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
        if docker manifest inspect "$NEW_IMAGE" >/dev/null 2>&1; then
          DEPLOY_IMAGE="$NEW_IMAGE"
          echo "✅ Using unique tag image: $DEPLOY_IMAGE"
        elif docker manifest inspect "$FALLBACK_IMAGE" >/dev/null 2>&1; then
          DEPLOY_IMAGE="$FALLBACK_IMAGE"
          echo "⚠️ Falling back to branch tag: $DEPLOY_IMAGE"
        else
          echo "❌ Neither image found in registry"
          exit 1
        fi
        
        # 현재 이미지와 비교
        CURRENT_IMAGE=$(kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
        echo "📋 Image comparison:"
        echo "   Current: $CURRENT_IMAGE"
        echo "   New: $DEPLOY_IMAGE"
        
        if [ "$CURRENT_IMAGE" = "$DEPLOY_IMAGE" ]; then
          echo "⚠️ Images are identical, forcing restart anyway..."
          FORCE_RESTART=true
        else
          echo "✅ Different images detected, proceeding with update..."
          FORCE_RESTART=false
        fi
        
        # Deployment 업데이트 (무중단 롤링 업데이트)
        echo "🔄 Updating deployment with zero-downtime strategy..."
        
        # imagePullPolicy를 Always로 설정 및 이미지 업데이트
        kubectl patch deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} --type='merge' -p="{
          \"spec\": {
            \"template\": {
              \"spec\": {
                \"containers\": [{
                  \"name\": \"${{ env.K8S_CONTAINER_NAME }}\",
                  \"image\": \"$DEPLOY_IMAGE\",
                  \"imagePullPolicy\": \"Always\"
                }]
              }
            }
          }
        }"
        
        # 배포 메타데이터 업데이트 (변경 감지 보장)
        kubectl annotate deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} \
          "deployment.kubernetes.io/deployed-at=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          "deployment.kubernetes.io/deployed-by=github-actions" \
          "deployment.kubernetes.io/commit-sha=${{ github.sha }}" \
          "deployment.kubernetes.io/image-tag=${UNIQUE_TAG}" \
          "deployment.kubernetes.io/run-id=${{ github.run_id }}" \
          --overwrite
        
        # 강제 재시작 (동일 이미지인 경우 또는 확실한 적용을 위해)
        if [ "$FORCE_RESTART" = "true" ] || [ "${{ github.event.inputs.force_restart }}" = "true" ]; then
          echo "🔄 Performing rolling restart to ensure changes..."
          kubectl rollout restart deployment/${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
        fi
        
        echo "✅ Deployment update initiated successfully"
        
    - name: ⏳ 배포 상태 실시간 모니터링
      timeout-minutes: 15
      run: |
        echo "⏳ Real-time deployment monitoring..."
        
        # 롤아웃 상태 모니터링 (타임아웃 10분)
        echo "🔍 Monitoring rollout progress..."
        if kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=600s; then
          echo "✅ Rollout completed successfully!"
        else
          echo "❌ Rollout failed or timed out"
          
          # 실패 시 상세 디버깅 정보
          echo "📋 Deployment failure analysis:"
          kubectl describe deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
          
          echo "📋 Current pod status:"
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api -o wide
          
          echo "📋 Pod events and logs:"
          for pod in $(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api -o jsonpath='{.items[*].metadata.name}'); do
            echo "=== Pod: $pod ==="
            kubectl describe pod $pod -n ${{ env.K8S_NAMESPACE }} | tail -20
            echo "--- Logs ---"
            kubectl logs $pod -n ${{ env.K8S_NAMESPACE }} --tail=20 || echo "No logs available"
          done
          
          echo "📋 Recent cluster events:"
          kubectl get events -n ${{ env.K8S_NAMESPACE }} --sort-by='.lastTimestamp' | tail -15
          
          exit 1
        fi
        
        # 배포 후 안정성 확인
        echo "🔍 Post-deployment stability check..."
        sleep 30
        
        # Pod 안정성 재확인
        if kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.readyReplicas}' | grep -q "^[1-9]"; then
          echo "✅ Deployment is stable with ready replicas"
        else
          echo "⚠️ Deployment may not be fully stable"
          kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide
        fi
        
    - name: 🔍 배포 후 종합 검증
      run: |
        echo "🔍 Comprehensive post-deployment verification..."
        
        # 최종 배포 상태 확인
        echo "📋 Final deployment status:"
        kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide
        
        # 새로운 Pod 상태 분석
        echo "📋 New pod status (sorted by creation time):"
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api --sort-by=.metadata.creationTimestamp -o wide
        
        # 실제 사용 중인 이미지 확인
        echo "📋 Currently running image:"
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[0].image}{"\n"}{end}'
        
        # Pod 리소스 사용량 확인
        echo "📋 Pod resource usage:"
        kubectl top pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api || echo "⚠️ Metrics not available"
        
        # Service 연결 상태 확인
        echo "📋 Service connectivity:"
        kubectl get service -n ${{ env.K8S_NAMESPACE }}
        kubectl get endpoints -n ${{ env.K8S_NAMESPACE }}
        
        # 배포 히스토리 확인
        echo "📋 Deployment rollout history:"
        kubectl rollout history deployment/${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
        
        echo "✅ Post-deployment verification completed"
        
    - name: 🩺 애플리케이션 헬스체크 및 기능 검증
      run: |
        echo "🩺 Comprehensive application health check..."
        
        # Pod Ready 상태 확인
        echo "⏳ Waiting for all pods to be ready..."
        kubectl wait --for=condition=Ready pod -l app=zdm-api -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        echo "✅ All pods are ready"
        
        # 내부 서비스 접근성 테스트
        echo "🔍 Testing internal service accessibility..."
        kubectl run healthcheck-${{ github.run_id }} \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=60s \
          -n ${{ env.K8S_NAMESPACE }} \
          -- curl -f -m 30 -v http://zdm-api-service:53307/health || {
            echo "⚠️ Health endpoint check failed"
            echo "Testing basic connectivity..."
            kubectl run connectivity-test-${{ github.run_id }} \
              --image=curlimages/curl \
              --rm -i --restart=Never \
              --timeout=60s \
              -n ${{ env.K8S_NAMESPACE }} \
              -- curl -f -m 10 http://zdm-api-service:53307/ || echo "Basic connectivity failed"
          }
        
        # 애플리케이션 로그 확인 (최신 변경사항 검증)
        echo "📋 Application logs from new pods:"
        for pod in $(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1:].metadata.name}'); do
          echo "=== Logs from newest pod: $pod ==="
          kubectl logs $pod -n ${{ env.K8S_NAMESPACE }} --tail=50 || echo "No logs available"
        done
        
        # 애플리케이션 내부 구조 확인
        echo "📋 Application internal verification:"
        LATEST_POD=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1:].metadata.name}')
        if [ ! -z "$LATEST_POD" ]; then
          echo "Checking latest pod: $LATEST_POD"
          kubectl exec $LATEST_POD -n ${{ env.K8S_NAMESPACE }} -- ls -la /app/ || echo "⚠️ /app directory not accessible"
          kubectl exec $LATEST_POD -n ${{ env.K8S_NAMESPACE }} -- cat /app/package.json | grep version || echo "⚠️ package.json not found"
        fi
        
        echo "✅ Application health check completed"
        
    - name: 📊 배포 완료 종합 요약
      run: |
        # 배포 성공 정보 수집
        CURRENT_IMAGE=$(kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
        READY_REPLICAS=$(kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
        TOTAL_REPLICAS=$(kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.spec.replicas}')
        
        # GitHub Actions Summary 생성
        echo "## 🎯 무중단 배포 완료 종합 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 배포 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **환경**: Production (NKS)" >> $GITHUB_STEP_SUMMARY
        echo "- **네임스페이스**: \`${{ env.K8S_NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: \`${{ env.K8S_DEPLOYMENT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **현재 이미지**: \`${CURRENT_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **고유 태그**: \`${{ needs.build-and-test.outputs.unique_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **배포자**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **배포 시간**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Pod 상태**: ${READY_REPLICAS}/${TOTAL_REPLICAS} Ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 배포 검증 명령어" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# 현재 배포 상태 확인" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o wide" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Pod 상태 확인" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=zdm-api" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 현재 이미지 확인" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get deployment ${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}'" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 서비스 접근 테스트" >> $GITHUB_STEP_SUMMARY
        echo "kubectl run test --image=curlimages/curl --rm -i --restart=Never -n ${{ env.K8S_NAMESPACE }} -- curl -f http://zdm-api-service:53307/health" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 롤백 명령어 (필요시)" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# 이전 버전으로 롤백" >> $GITHUB_STEP_SUMMARY
        echo "kubectl rollout undo deployment/${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 롤백 상태 확인" >> $GITHUB_STEP_SUMMARY
        echo "kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Deployment summary generated successfully"

  # 5단계: 알림 및 결과 리포트
  notify-result:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, verify-image, deploy-to-kubernetes]
    if: always()
    
    steps:
    - name: 📧 배포 결과 이메일 알림
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "[NCP] ${{ env.PROJECT_NAME }} 간소화된 무중단 배포 결과: ${{ (needs.docker-build-push.result == 'success' && (needs.deploy-to-kubernetes.result == 'success' || needs.deploy-to-kubernetes.result == 'skipped')) && '✅ 성공' || '❌ 실패' }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          ${{ env.PROJECT_NAME }} 간소화된 태그 전략을 사용한 무중단 Docker 이미지 빌드 및 Kubernetes 배포가 완료되었습니다.

          ## 🎯 배포 결과 종합 요약
          - 📦 빌드 및 테스트: ${{ needs.build-and-test.result }} ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
          - 🐳 Docker 빌드 & 푸시: ${{ needs.docker-build-push.result }} ${{ needs.docker-build-push.result == 'success' && '✅' || '❌' }}
          - 🔍 간소화된 이미지 검증: ${{ needs.verify-image.result }} ${{ needs.verify-image.result == 'success' && '✅' || '❌' }}
          - 🚀 무중단 Kubernetes 배포: ${{ needs.deploy-to-kubernetes.result }} ${{ needs.deploy-to-kubernetes.result == 'success' && '✅' || needs.deploy-to-kubernetes.result == 'skipped' && '⏭️' || '❌' }}

          ## 📋 프로젝트 정보
          - **프로젝트**: ${{ env.PROJECT_NAME }}
          - **레지스트리**: ${{ env.REGISTRY_URL }}
          - **브랜치**: ${{ github.ref_name }}
          - **커밋**: ${{ github.sha }}
          - **고유 태그**: ${{ needs.build-and-test.outputs.unique_tag }}
          - **버전**: ${{ needs.build-and-test.outputs.version }}
          - **트리거**: ${{ github.event_name }}
          - **배포자**: ${{ github.actor }}

          ## 🐳 Docker 이미지
          ${{ needs.docker-build-push.result == 'success' && format('**성공적으로 푸시된 이미지:**
          ```
          {0}/{1}:{2}
          {0}/{1}:{3}
          ```', env.REGISTRY_URL, env.PROJECT_NAME, github.ref_name, needs.build-and-test.outputs.unique_tag) || '❌ 이미지 빌드 실패' }}

          ## ⚙️ Kubernetes 배포 정보
          ${{ needs.deploy-to-kubernetes.result == 'success' && format('**배포 성공:**
          - 네임스페이스: `{0}`
          - Deployment: `{1}`
          - 배포 방식: 무중단 롤링 업데이트
          - 이미지 태그: `{2}`
          - 배포 완료: ✅', env.K8S_NAMESPACE, env.K8S_DEPLOYMENT_NAME, needs.build-and-test.outputs.unique_tag) || needs.deploy-to-kubernetes.result == 'skipped' && '⏭️ 배포 건너뜀 (main 브랜치 아님)' || '❌ 배포 실패' }}

          ## 🔗 링크
          - **GitHub Actions 실행**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - **커밋 상세**: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}

          ---
          📅 실행 시간: ${{ github.event.head_commit.timestamp }}
          🤖 GitHub Actions에서 자동 발송
      if: always()
      
    - name: 📊 간소화된 CI/CD 파이프라인 요약
      run: |
        echo "## 🎯 간소화된 태그 전략 CI/CD 파이프라인 최종 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 단계 | 결과 | 상태 | 설명 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 빌드 및 테스트 | ${{ needs.build-and-test.result }} | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} | TypeScript 빌드, 간소화된 태그 생성 |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker 빌드 & 푸시 | ${{ needs.docker-build-push.result }} | ${{ needs.docker-build-push.result == 'success' && '✅' || '❌' }} | 간소화된 태그 전략, NCP Registry |" >> $GITHUB_STEP_SUMMARY
        echo "| 간소화된 이미지 검증 | ${{ needs.verify-image.result }} | ${{ needs.verify-image.result == 'success' && '✅' || '❌' }} | 캐시 정리, 브랜치명 태그 검증 |" >> $GITHUB_STEP_SUMMARY
        echo "| 무중단 K8s 배포 | ${{ needs.deploy-to-kubernetes.result }} | ${{ needs.deploy-to-kubernetes.result == 'success' && '✅' || needs.deploy-to-kubernetes.result == 'skipped' && '⏭️' || '❌' }} | 롤링 업데이트, 고유 태그 |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 핵심 개선사항" >> $GITHUB_STEP_SUMMARY
        echo "- **간소화된 태그 전략**: 브랜치명 + 브랜치명-날짜시간 형식만 사용" >> $GITHUB_STEP_SUMMARY
        echo "- **강화된 캐시 정리**: Docker 캐시 완전 제거로 최신 이미지 보장" >> $GITHUB_STEP_SUMMARY
        echo "- **무중단 배포**: 롤링 업데이트로 서비스 중단 없음" >> $GITHUB_STEP_SUMMARY
        echo "- **상세한 검증**: 이미지 메타데이터, 애플리케이션 구조 확인" >> $GITHUB_STEP_SUMMARY
        echo "- **Service Account Token**: 안정적인 Kubernetes 인증" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 생성된 이미지 태그 (간소화됨)" >> $GITHUB_STEP_SUMMARY
        echo "- **레지스트리**: \`${{ env.REGISTRY_URL }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **프로젝트**: \`${{ env.PROJECT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치 태그**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **고유 태그**: \`${{ needs.build-and-test.outputs.unique_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **버전**: \`${{ needs.build-and-test.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.deploy-to-kubernetes.result }}" == "success" ]]; then
          echo "### 🎉 배포 성공 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **환경**: Production (NKS)" >> $GITHUB_STEP_SUMMARY
          echo "- **네임스페이스**: \`${{ env.K8S_NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: \`${{ env.K8S_DEPLOYMENT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 시간**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 방식**: 무중단 롤링 업데이트" >> $GITHUB_STEP_SUMMARY
        fi
      if: always()