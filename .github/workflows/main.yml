# .github/workflows/ci-cd.yml
name: Puppeteer CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: action-test-image

jobs:
  # 1단계: 테스트 실행
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 20 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 린트 검사
      run: npm run lint
      
    - name: 단위 테스트 실행
      run: npm test
      
    - name: 커버리지 리포트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # 2단계: 보안 검사
  security:
    name: 보안 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 20 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: npm audit 실행
      run: npm audit --audit-level high
      continue-on-error: true
      
    - name: Snyk 보안 검사
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # 3단계: 빌드 및 아티팩트 생성
  build:
    name: 빌드 및 아티팩트
    runs-on: ubuntu-latest
    needs: [test, security]
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 20 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 애플리케이션 빌드
      run: npm run build
      
    - name: 버전 정보 생성
      id: version
      run: |
        VERSION=${GITHUB_SHA::7}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" > version.txt
        echo "Build version: $VERSION"
        
    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ steps.version.outputs.version }}
        path: |
          package.json
          package-lock.json
          puppeteer.js
          *.test.js
          jest.config.js
          version.txt
        retention-days: 30

  # 4단계: Docker 이미지 빌드
  docker-build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: GitHub Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 이미지 취약점 스캔
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: 취약점 결과 업로드
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # 5단계: 릴리스 노트 생성
  create-release:
    name: 릴리스 생성
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 릴리스 태그 생성
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: Release v${{ needs.build.outputs.version }}
        body: |
          ## 변경 사항
          
          ### 새로운 기능
          - Puppeteer 자동화 스크립트 업데이트
          - Docker 이미지 빌드 및 배포
          
          ### 기술적 개선사항
          - Node.js 20 버전 사용
          - 보안 검사 강화
          - CI/CD 파이프라인 최적화
          
          ### Docker 이미지
          ```
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:v${{ needs.build.outputs.version }}
          ```
          
          **빌드 정보:**
          - 커밋: ${{ github.sha }}
          - 빌드 시간: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

  # 6단계: 결과 이메일 전송
  notify-result:
    name: 결과 이메일 알림
    runs-on: ubuntu-latest
    needs:
      - test
      - security  
      - build
      - docker-build
      - create-release
    if: always()
    
    steps:
    - name: 최종 결과 이메일 발송
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "[CI/CD] Puppeteer 프로젝트 빌드 결과: ${{ contains(needs.*.result, 'failure') && '실패' || '성공' }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          Puppeteer CI/CD 파이프라인이 완료되었습니다.

          ## 빌드 결과 요약
          - 테스트 실행: ${{ needs.test.result }}
          - 보안 검사: ${{ needs.security.result }}
          - 빌드 및 아티팩트: ${{ needs.build.result }}
          - Docker 이미지 빌드: ${{ needs.docker-build.result }}
          - 릴리스 생성: ${{ needs.create-release.result }}

          ## 프로젝트 정보
          - 레포지토리: ${{ github.repository }}
          - 브랜치: ${{ github.ref_name }}
          - 커밋: ${{ github.sha }}
          - 작성자: ${{ github.actor }}
          - 빌드 시간: ${{ github.event.head_commit.timestamp }}

          ## Docker 이미지
          ${{ needs.docker-build.result == 'success' && format('```\ndocker pull {0}/{1}/{2}:latest\n```', env.REGISTRY, github.repository_owner, env.IMAGE_NAME) || '이미지 빌드 실패' }}

          ## 액션 상세 보기
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ## 릴리스 정보
          ${{ needs.create-release.result == 'success' && format('릴리스 v{0}이 생성되었습니다.', needs.build.outputs.version) || '릴리스 생성 실패 또는 스킵' }}
      if: always()