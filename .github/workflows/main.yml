name: Build and Push to NCP Container Registry

on:
  push:
    branches: [ '**' ]  # 모든 브랜치에서 실행
  pull_request:
    branches: [ main, develop ]

# GitHub Actions 권한 설정
permissions:
  contents: read
  packages: write

env:
  PROJECT_NAME: zdm-api-server
  REGISTRY_URL: zcon-nipa-container-registry.kr.ncr.ntruss.com
  NODE_VERSION: '22'

jobs:
  # 1단계: 빌드 및 테스트
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js ${{ env.NODE_VERSION }} 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🧪 TypeScript 빌드 테스트
      run: |
        echo "🔍 Testing TypeScript build..."
        npm run build
        echo "✅ TypeScript build successful"
        
    - name: 🏷️ 버전 정보 생성
      id: version
      run: |
        # 태그가 있으면 태그를 사용, 없으면 브랜치-SHA 조합 사용
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.ref_name }}-${{ github.sha }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📍 Generated version: $VERSION"
        
    - name: 📤 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ steps.version.outputs.version }}
        path: |
          dist/
          package.json
          package-lock.json
        retention-days: 1

  # 2단계: Docker 이미지 빌드 및 푸시
  docker-build-push:
    name: Docker Build and Push to NCP
    runs-on: ubuntu-latest
    needs: build-and-test
    # main, develop 브랜치의 push 이벤트에서만 실행
    if: |
      github.event_name == 'push' && 
      (github.ref_name == 'main' || github.ref_name == 'develop')
    
    steps:
    - name: 🛒 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 NCP Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.NCP_REGISTRY_USERNAME }}
        password: ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
    - name: 🏷️ 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=${{ env.PROJECT_NAME }}
          org.opencontainers.image.description=TypeScript Server for ${{ env.PROJECT_NAME }}
          org.opencontainers.image.vendor=Your Organization
          
    - name: 🐳 Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: 📋 푸시된 이미지 정보 출력
      run: |
        echo "🎉 Successfully pushed to NCP Container Registry!"
        echo "📍 Registry: ${{ env.REGISTRY_URL }}"
        echo "📍 Repository: ${{ env.PROJECT_NAME }}"
        echo "📍 Tags:"
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          echo "   - $tag"
        done
        
    - name: 🧹 빌드 캐시 정리
      run: |
        echo "🧹 Cleaning up build cache..."
        docker builder prune -f
        echo "✅ Build cache cleaned up"

  # 3단계: 이미지 검증
  verify-image:
    name: Verify Pushed Image
    runs-on: ubuntu-latest
    needs: docker-build-push
    # Docker 이미지가 푸시된 경우에만 실행
    if: |
      github.event_name == 'push' && 
      (github.ref_name == 'main' || github.ref_name == 'develop')
    
    steps:
    - name: 🔐 NCP Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.NCP_REGISTRY_USERNAME }}
        password: ${{ secrets.NCP_REGISTRY_PASSWORD }}
        
    - name: 🔍 이미지 검증
      run: |
        echo "🔍 Verifying pushed image..."
        
        # latest 태그 이미지 풀 테스트
        IMAGE_NAME="${{ env.REGISTRY_URL }}/${{ env.PROJECT_NAME }}:latest"
        echo "📦 Pulling image: $IMAGE_NAME"
        
        if docker pull "$IMAGE_NAME"; then
          echo "✅ Image pull successful"
          
          # 이미지 정보 출력
          echo "📋 Image information:"
          docker images "$IMAGE_NAME" --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}"
          
          # 간단한 실행 테스트
          echo "🚀 Testing container startup..."
          CONTAINER_ID=$(docker run -d -p 8080:53307 "$IMAGE_NAME")
          
          # 컨테이너 시작 대기
          sleep 15
          
          # 헬스체크
          if docker ps | grep -q "$CONTAINER_ID"; then
            echo "✅ Container is running"
            
            # HTTP 응답 테스트 (포트포워딩 없이 컨테이너 내부에서)
            if docker exec "$CONTAINER_ID" wget -q --spider http://localhost:53307/; then
              echo "✅ Application is responding"
            else
              echo "⚠️ Application health check failed"
              docker logs "$CONTAINER_ID"
            fi
          else
            echo "❌ Container failed to start"
            docker logs "$CONTAINER_ID"
          fi
          
          # 정리
          docker stop "$CONTAINER_ID" > /dev/null 2>&1
          docker rm "$CONTAINER_ID" > /dev/null 2>&1
          
        else
          echo "❌ Image pull failed"
          exit 1
        fi

  # 4단계: 알림 및 결과 리포트
  notify-result:
    name: Notify Build Result
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, verify-image]
    if: always()
    
    steps:
    - name: 📧 결과 이메일 알림
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "[NCP] ${{ env.PROJECT_NAME }} 빌드 및 푸시 결과: ${{ needs.docker-build-push.result == 'success' && '성공' || '실패' }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          ${{ env.PROJECT_NAME }} Docker 이미지 빌드 및 NCP Container Registry 푸시가 완료되었습니다.

          ## 빌드 결과 요약
          - 📦 빌드 및 테스트: ${{ needs.build-and-test.result }}
          - 🐳 Docker 빌드 & 푸시: ${{ needs.docker-build-push.result }}
          - 🔍 이미지 검증: ${{ needs.verify-image.result }}

          ## 프로젝트 정보
          - 프로젝트: ${{ env.PROJECT_NAME }}
          - 레지스트리: ${{ env.REGISTRY_URL }}
          - 브랜치: ${{ github.ref_name }}
          - 커밋: ${{ github.sha }}
          - 버전: ${{ needs.build-and-test.outputs.version }}
          - 트리거: ${{ github.event_name }}
          - 작성자: ${{ github.actor }}

          ## Docker 이미지
          ${{ needs.docker-build-push.result == 'success' && format('```
          {0}/{1}:latest
          {0}/{1}:{2}
          ```', env.REGISTRY_URL, env.PROJECT_NAME, needs.build-and-test.outputs.version) || '이미지 빌드 실패' }}

          ## 액션 상세 보기
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ---
          실행 시간: ${{ github.event.head_commit.timestamp }}
      if: always()
      
    - name: 📊 워크플로우 요약
      run: |
        echo "## 🎯 빌드 및 푸시 워크플로우 완료 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 단계 | 결과 | 상태 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 빌드 및 테스트 | ${{ needs.build-and-test.result }} | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker 빌드 & 푸시 | ${{ needs.docker-build-push.result }} | ${{ needs.docker-build-push.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 이미지 검증 | ${{ needs.verify-image.result }} | ${{ needs.verify-image.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 생성된 이미지" >> $GITHUB_STEP_SUMMARY
        echo "- **레지스트리**: \`${{ env.REGISTRY_URL }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **프로젝트**: \`${{ env.PROJECT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **버전**: \`${{ needs.build-and-test.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
      if: always()